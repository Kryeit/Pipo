plugins {
    id 'fabric-loom' version '1.2-SNAPSHOT'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
}

version = project.mod_version
group = project.maven_group

repositories {
    mavenCentral()
    maven {
        name = 'GriefDefender'
        url = 'https://repo.glaremasters.me/repository/bloodshot'
    }
    maven {
        name = 'LuckPerms'
        url = 'https://oss.sonatype.org/content/repositories/snapshots'
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    implementation "net.dv8tion:JDA:${jda_version}"
    shadow "net.dv8tion:JDA:${jda_version}"

    implementation "io.javalin:javalin:6.1.3"
    shadow "io.javalin:javalin:6.1.3"

    implementation 'org.json:json:20230227'
    shadow 'org.json:json:20230227'

    implementation 'org.jsoup:jsoup:1.18.1'
    shadow 'org.jsoup:jsoup:1.18.1'

    compileOnly "com.griefdefender:api:${griefdefender_version}"
    compileOnly "net.luckperms:api:${luckperms_version}"
    compileOnly 'me.lucko:spark-api:0.1-SNAPSHOT'

//    implementation("org.eclipse.jetty.websocket:websocket-core-common:11.0.20")
//    implementation("org.eclipse.jetty.websocket:websocket-core-server:11.0.20")
//    implementation("org.eclipse.jetty.websocket:websocket-jetty-api:11.0.20")
//    implementation("org.eclipse.jetty.websocket:websocket-jetty-common:11.0.20")
//    implementation("org.eclipse.jetty.websocket:websocket-jetty-server:11.0.20")
//    implementation("org.eclipse.jetty.websocket:websocket-servlet:11.0.20")
//    implementation("org.eclipse.jetty.websocket:websocket-jetty-server:11.0.20")
//    implementation("org.eclipse.jetty:jetty-server:11.0.20")
//    implementation("org.eclipse.jetty:jetty-servlet:11.0.20")
//    implementation("org.eclipse.jetty:jetty-util:11.0.20")
//    implementation("org.eclipse.jetty:jetty-webapp:11.0.20")
//    implementation("org.eclipse.jetty:jetty-xml:11.0.20")
//    implementation("org.eclipse.jetty:jetty-http:11.0.20")
//    implementation("org.eclipse.jetty:jetty-io:11.0.20")
//    implementation("org.eclipse.jetty:jetty-jmx:11.0.20")
//    implementation("org.eclipse.jetty:jetty-security:11.0.20")
//    implementation("org.eclipse.jetty.toolchain:jetty-jakarta-servlet-api:5.0.2")
//    implementation("org.eclipse.jetty:jetty-util-ajax:11.0.20")
//    implementation("org.jetbrains.kotlin:kotlin-stdlib:1.9.22")

    implementation 'org.jdbi:jdbi3-core:3.45.4'
    shadow 'org.jdbi:jdbi3-core:3.45.4'

    shadow 'com.clickhouse:clickhouse-jdbc:0.6.4:all'

    // Dependencies for JDA
//    implementation "net.sf.trove4j:trove4j:3.0.3"
//    implementation 'org.slf4j:slf4j-nop:1.7.25'
//    implementation 'org.slf4j:slf4j-api:1.7.25'
//    implementation 'org.apache.commons:commons-collections4:4.3'
//    implementation 'com.neovisionaries:nv-websocket-client:2.14'
//    implementation 'com.squareup.okhttp3:okhttp:3.14.9'
//    implementation 'com.squareup.okio:okio:1.17.2'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.10.1'
    shadow 'com.fasterxml.jackson.core:jackson-databind:2.10.1'

    implementation 'com.zaxxer:HikariCP:5.1.0'
    shadow 'com.zaxxer:HikariCP:5.1.0'
//    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.10.1'
//    implementation 'com.fasterxml.jackson.core:jackson-core:2.10.1'
//    implementation "club.minnced:discord-webhooks:0.5.8"
}


java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)  // Use Java 17 for Minecraft 1.20.2
    }
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"
}


shadowJar {
    configurations = [project.configurations.shadow]
    exclude("META-INF")
}

remapJar {
    // wait until the shadowJar is done
    dependsOn(shadowJar)
    mustRunAfter(shadowJar)
    // Set the input jar for the task. Here use the shadow Jar that include the .class of the transitive dependency
    inputFile = file(shadowJar.archivePath)
}

shadowJar {
    configurations = [project.configurations.shadow]
    mergeServiceFiles()  // Merges service files from dependencies
    exclude("META-INF")
}

tasks.build {
    dependsOn tasks.shadowJar  // Ensure shadowJar is built when running the build task
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

